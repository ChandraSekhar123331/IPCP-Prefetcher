/*****************************************************
For the Third Data Prefetching Championship - DPC3

Paper ID: #4
Instruction Pointer Classifying Prefetcher - IPCP

Authors:
Samuel Pakalapati - pakalapatisamuel@gmail.com
Biswabandan Panda - biswap@cse.iitk.ac.in
******************************************************/

#include "cache.h"

#define NUM_IP_TABLE_L2_ENTRIES 1024
#define NUM_IP_INDEX_BITS 10
#define NUM_IP_TAG_BITS 6
#define S_TYPE 1    // global stream (GS)
#define CS_TYPE 2   // constant stride (CS)
#define CPLX_TYPE 3 // complex stride (CPLX)
#define NL_TYPE 4   // next line (NL)

// #define AKASH_LOAD_PRINT_L2 // @Akash : For printing [ IP ,,, inp_addr ,,, pref_addr ,,, pref_type ] for each prefetching done
#ifdef AKASH_LOAD_PRINT_L2
#define AKASH_LD_L2(x) x
#else
#define AKASH_LD_L2(x)
#endif

// #define SIG_DEBUG_PRINT_L2
#ifdef SIG_DEBUG_PRINT_L2
#define SIG_DP(x) x
#else
#define SIG_DP(x)
#endif

class IP_TRACKER
{
public:
    uint64_t ip_tag;
    uint16_t ip_valid;
    uint32_t pref_type; // prefetch class type
    int stride;         // last stride sent by metadata

    IP_TRACKER()
    {
        ip_tag = 0;
        ip_valid = 0;
        pref_type = 0;
        stride = 0;
    };
};

uint32_t spec_nl_l2[NUM_CPUS] = {0};
IP_TRACKER trackers[NUM_CPUS][NUM_IP_TABLE_L2_ENTRIES];

int decode_stride(uint32_t metadata)
{
    int stride = 0;
    if (metadata & 0b1000000)
        stride = -1 * (metadata & 0b111111);
    else
        stride = metadata & 0b111111;

    return stride;
}

uint64_t l2c_num_total_pref = 0;
uint64_t l2c_num_GS = 0;
uint64_t l2c_num_CS = 0;
uint64_t l2c_num_NL = 0;
uint64_t l2c_num_IPs = 0;



void CACHE::l2c_prefetcher_initialize()
{
 l2c_num_total_pref = 0;
 l2c_num_GS = 0;
 l2c_num_CS = 0;
 l2c_num_NL = 0;
 l2c_num_IPs = 0;
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    int prefetch_degree = 0;
    int gs_prefetch_degree = 0;
    int64_t stride = decode_stride(metadata_in);
    uint32_t pref_type = metadata_in & 0xF00;  // ideally, we should right-shift again... but well... fine!
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS) & ((1 << NUM_IP_TAG_BITS) - 1);

    if (NUM_CPUS == 1)
    {
        if (MSHR.occupancy < (1 * MSHR.SIZE) / 2){
            prefetch_degree = 4;
            gs_prefetch_degree = 2; //@Akash : lowering GS agressiveness

        }
        else{
            prefetch_degree = 3;
            gs_prefetch_degree = 1; //@Akash : lowering GS agressiveness

        }

        // // @Akash: Global Prefetcher Throttling - not IP dependent
        // uint64_t my_pf_useful = pf_useful;
        // uint64_t my_pf_useless = pf_useless;
        // uint64_t my_pf_net = my_pf_useless + my_pf_useful;

        // float my_pf_accuracy = ((float)my_pf_useful) / (1 + my_pf_net);

        // if (my_pf_net > 1000)
        // { // starting threshold for throttling

        //     if (my_pf_accuracy < 0.2)
        //     {
        //         gs_prefetch_degree = 1;
        //         // prefetch_degree = 1;
        //     }
        //     else if (my_pf_accuracy < 0.5)
        //     {
        //         gs_prefetch_degree = 2;
        //         // prefetch_degree = 2;
        //     }
        //     else
        //     {
        //         gs_prefetch_degree = 2;
        //         // gs_prefetch_degree = 3;
        //         // prefetch_degree = 3;
        //     }
        // }
        // // @Akash: Global Prefetcher Throttling - not IP dependent
    }
    else
    { // tightening the degree for multi-core
        prefetch_degree = 2;
    }

    // calculate the index bit
    int index = ip & ((1 << NUM_IP_INDEX_BITS) - 1);
    if (trackers[cpu][index].ip_tag != ip_tag)
    { // new/conflict IP
        if (trackers[cpu][index].ip_valid == 0)
        { // if valid bit is zero, update with latest IP info
            trackers[cpu][index].ip_tag = ip_tag;
            trackers[cpu][index].pref_type = pref_type;
            trackers[cpu][index].stride = stride;
        }
        else
        {
            trackers[cpu][index].ip_valid = 0; // otherwise, reset valid bit and leave the previous IP as it is
        }

        l2c_num_IPs++;
        // issue a next line prefetch upon encountering new IP
        uint64_t pf_address = ((addr >> LOG2_BLOCK_SIZE) + 1) << LOG2_BLOCK_SIZE;
        l2c_num_total_pref++;
        l2c_num_NL++;
        AKASH_LD_L2(cout << ip << " " << (addr >> (LOG2_BLOCK_SIZE)) << " " << (pf_address >> (LOG2_BLOCK_SIZE)) << " "<< "new_ip " << ((type == PREFETCH) ? "Prefetch": "Load" )<< endl);
        prefetch_line(ip, addr, pf_address, FILL_L2, 0);
        SIG_DP(cout << "1, ");
        return metadata_in;
    }

    else
    { // if same IP encountered, set valid bit
        trackers[cpu][index].ip_valid = 1;
    }

    // update the IP table upon receiving metadata from prefetch
    if (type == PREFETCH)
    {
        trackers[cpu][index].pref_type = pref_type;
        trackers[cpu][index].stride = stride;
        spec_nl_l2[cpu] = metadata_in & 0x1000;
    }

    SIG_DP(
        cout << ip << ", " << cache_hit << ", " << cl_addr << ", ";
        cout << ", " << stride << "; ";);

    // we are prefetching only for GS, CS and NL classes
    if (trackers[cpu][index].stride != 0)
    {
        if (trackers[cpu][index].pref_type == 0x100 || trackers[cpu][index].pref_type == 0x200)
        { // GS or CS class
            if (trackers[cpu][index].pref_type == 0x100) // Global Stream
                if (NUM_CPUS == 1)
                    // prefetch_degree = 4;
                    prefetch_degree = gs_prefetch_degree; // @Akash

            for (int i = 0; i < prefetch_degree; i++)
            {
                uint64_t pf_address = (cl_addr + (trackers[cpu][index].stride * (i + 1))) << LOG2_BLOCK_SIZE;

                // Check if prefetch address is in same 4 KB page
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;

                l2c_num_total_pref++;
                if (trackers[cpu][index].pref_type == 0x100){
                    l2c_num_GS++;
                    AKASH_LD_L2(cout << ip << " " << (addr >> (LOG2_BLOCK_SIZE)) << " " << (pf_address >> (LOG2_BLOCK_SIZE)) << " "
                                     << "GS " << ((type == PREFETCH)
                                    ? "Prefetch"
                                    : "Load" ) <<endl);
                } 
                if (trackers[cpu][index].pref_type == 0x200){
                    l2c_num_CS++;
                    AKASH_LD_L2(cout << ip << " " << (addr >> (LOG2_BLOCK_SIZE)) << " " << (pf_address >> (LOG2_BLOCK_SIZE)) << " "
                                     << "CS " << ((type == PREFETCH)
                                    ? "Prefetch"
                                    : "Load" )<< endl);
                } 
                prefetch_line(ip, addr, pf_address, FILL_L2, 0);
                SIG_DP(cout << trackers[cpu][index].stride << ", ");
            }
        }
        // else if (trackers[cpu][index].pref_type == 0x400 && spec_nl_l2[cpu] > 0)
        else if (trackers[cpu][index].pref_type == 0x400 && spec_nl_l2[cpu] > 0 && type != LOAD) // @Akash : NL is actiaved for thrashing accesses... which dont deserve prefetching
        {
            

            uint64_t pf_address = ((addr >> LOG2_BLOCK_SIZE) + 1) << LOG2_BLOCK_SIZE;
            l2c_num_total_pref++;
            l2c_num_NL++;
            AKASH_LD_L2(cout << ip << " " << (addr >> (LOG2_BLOCK_SIZE)) << " " << (pf_address >> (LOG2_BLOCK_SIZE)) << " "
                             << "NL " << ((type == PREFETCH)
                            ? "Prefetch"
                            : "Load") << endl);

            prefetch_line(ip, addr, pf_address, FILL_L2, 0);
            SIG_DP(cout << "1;");
        }
    }

    SIG_DP(cout << endl);
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    cout << endl;
    cout << "************************** L2C IPCP STATS ***************************" << endl;
    cout << "Number IPs present : " << l2c_num_IPs << "\n";
    cout << "Total Prefetches given : " << l2c_num_total_pref << "\n";
    cout << "Total GS prefs given : " << l2c_num_GS << "\t in %: "<< ((float)l2c_num_GS * 100)/l2c_num_total_pref  <<"\n";
    cout << "Total CS prefs given : " << l2c_num_CS << "\t in %: "<< ((float)l2c_num_CS * 100)/l2c_num_total_pref  <<"\n";
    cout << "Total NL prefs given : " << l2c_num_NL << "\t in %: "<< ((float)l2c_num_NL * 100)/l2c_num_total_pref  <<"\n";
    cout << "************************** L2C IPCP STATS ***************************" << endl;
}